// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

model User {

id Int @id @default(autoincrement())
email String @unique
password String
name String
country String
mobile String
role UserRole @default(ADMIN)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
orders Order[]

// New relation for owned products
products  Product[]

}

model Category {

  id Int @id @default(autoincrement())
  name String @unique
  products Product[]

}

model Product {

id Int @id @default(autoincrement())
name String
description String 
price Float
stock Int
images Image[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
OrderItems OrderItem[]
categoryId Int
category Category @relation(fields: [categoryId] , references: [id])

//a user can own a product
userId Int?
owner User? @relation(fields: [userId] , references: [id]) 

}

model Image {

  id Int @id @default(autoincrement())
  url String 
  productId Int 
  product Product @relation(fields: [productId] , references: [id] , onDelete: Cascade)
  
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  totalAmount Float
  status OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId] , references: [id])
  orderItems OrderItem[]
  stripe       Stripe?
  paypal Paypal?
  mtnMoMo MtnMoMo?
}

model Paypal {

  id Int @id @default(autoincrement())
  orderId Int @unique
  paymentId String @unique
  payerId String
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order Order @relation(fields: [orderId] , references: [id] , onDelete: Cascade)  

}

model MtnMoMo {
  id Int @id @default(autoincrement())
  orderId Int @unique
  transactionId String @unique
  phoneNumber String 
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// Stripe payment details
model Stripe {
  id Int @id @default(autoincrement())
  orderId Int @unique
  sessionId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order       Order  @relation(fields: [orderId], references: [id], onDelete: Cascade) // âœ… Link to Order
}

model OrderItem {

id Int @id @default(autoincrement())
orderId Int
productId Int
quantity Int
price Float
order Order @relation(fields: [  orderId ] , references: [id] , onDelete: Cascade)
product Product @relation(fields : [ productId ] , references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentProvider { 
  STRIPE
  PAYPAL
  MTN_MOMO
}







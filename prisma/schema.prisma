generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  MTN_MOMO
}

enum InteractionType {
  LIKE
  VIEW
}

model User {
  id        Int                  @id @default(autoincrement())
  email     String               @unique
  password  String
  name      String
  country   String
  mobile    String
  role      UserRole             @default(ADMIN)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  orders       Order[]
  products     Product[]         // Owned products
  contact      Contact[]
  interactions ProductInteraction[] // üëç New field for tracking likes/views
}

model Contact {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int?
  user   User?    @relation(fields: [userId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id          Int                  @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  categoryId Int
  category   Category              @relation(fields: [categoryId], references: [id])

  userId Int?
  owner  User?                     @relation(fields: [userId], references: [id])

  images        Image[]
  OrderItems    OrderItem[]
  interactions  ProductInteraction[] // üëç New field for tracking likes/views
}

model ProductInteraction {
  id         Int             @id @default(autoincrement())
  userId     Int
  user       User            @relation(fields: [userId], references: [id])

  productId  Int
  product    Product         @relation(fields: [productId], references: [id])

  type       InteractionType
  createdAt  DateTime        @default(now())
  @@unique([userId, productId, type])  // Unique per user-product-type combo
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]

  stripe      Stripe?
  paypal      Paypal?
  mtnMoMo     MtnMoMo?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Paypal {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  paymentId String   @unique
  payerId   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model MtnMoMo {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  transactionId String   @unique
  phoneNumber   String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Stripe {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  sessionId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
